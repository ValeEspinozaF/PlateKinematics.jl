var documenterSearchIndex = {"docs":
[{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"lib/main_functions.html#Main-Functions","page":"Main Functions","title":"Main Functions","text":"","category":"section"},{"location":"lib/main_functions.html#Contents","page":"Main Functions","title":"Contents","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Pages = [\"main_functions.md\"]\r\nDepth = 3","category":"page"},{"location":"lib/main_functions.html#Index","page":"Main Functions","title":"Index","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Pages = [\"main_functions.md\"]","category":"page"},{"location":"lib/main_functions.html#Main-Functions-2","page":"Main Functions","title":"Main Functions","text":"","category":"section"},{"location":"lib/main_functions.html#Build-Sampled-Ensembles","page":"Main Functions","title":"Build Sampled Ensembles","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"BuildEnsemble3D","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.BuildEnsemble3D","page":"Main Functions","title":"PlateKinematics.BuildEnsemble3D","text":"BuildEnsemble3D(FRs::FiniteRotSph, Nsize=1e6::Number)\n\nDraws Nsize Rotation Matrix samples from the covariance of a given Finite Rotation FRs.\n\n\n\n\n\nBuildEnsemble3D(EVs::EulerVectorSph, Nsize=1e6::Number)\n\nDraws Nsize Euler Vector samples from the covariance of a given Euler Vector EVs.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#Un-build-Sampled-Ensembles-(Average)","page":"Main Functions","title":"Un-build Sampled Ensembles (Average)","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"AverageEnsemble","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.AverageEnsemble","page":"Main Functions","title":"PlateKinematics.AverageEnsemble","text":"AverageEnsemble(FRsArray::Array{T}, time=nothing::Union{Nothing, Number}) where {T<:FiniteRotSph}\nAverageEnsemble(FRcArray::Array{T}, time=nothing::Union{Nothing, Number}) where {T<:FiniteRotCart}\n\nReturn the average Finite Rotation from a given ensemble. A specific output :Time  field may be passed through the argument time. The output type (FiniteRotSph  or FiniteRotCart) will mirror the input array type.\n\n\n\n\n\nAverageEnsemble(EVsArray::Array{T}, timeRange=nothing::Union{Nothing, Matrix}) where {T<:EulerVectorSph}\nAverageEnsemble(EVcArray::Array{T}, timeRange=nothing::Union{Nothing, Matrix}) where {T<:EulerVectorCart}\n\nReturn the average Euler Vector from a given ensemble. A specific output :TimeRange  field may be passed through the argument timeRange. The output type (EulerVectorSph  or EulerVectorCart) will mirror the input array type.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#Interpolate-Finite-Rotations","page":"Main Functions","title":"Interpolate Finite Rotations","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Interpolate_FiniteRotation","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.Interpolate_FiniteRotation","page":"Main Functions","title":"PlateKinematics.Interpolate_FiniteRotation","text":"Interpolate_FiniteRotation(FRs1::FiniteRotSph, time::Number, Nsize = 1e5::Number)\nInterpolate_FiniteRotation(FRs1::Array{FiniteRotSph}, time::Number)\n\nInterpolate a Finite Fotation for a given time between a Finite Rotation FRs and present-day.\n\n\n\n\n\nInterpolate_FiniteRotation(\n    FRs1::FiniteRotSph, FRs2::FiniteRotSph, time::Number, Nsize = 1e5::Number)\n\nInterpolate_FiniteRotation(\n    FRs1::Array{FiniteRotSph}, FRs2::Array{FiniteRotSph}, time::Number)\n\nInterpolate a Finite Rotation for a given time between two total Finite Rotations,  a younger FRs1 and an older one FRs2.\n\n\n\n\n\nInterpolate_FiniteRotation(\n    FRsList::Array{FiniteRotSph}, times::Array{Number}, Nsize = 1e5::Number)\n\nInterpolate a list times from a list of total Finite Rotations FRsList.\n\n\n\n\n\nInterpolate_FiniteRotation(MTX::Array{Float64, 3}, t1::Number, time::Number)\n\nInterpolate a Finite Fotation for a given time between a Rotation Matrix MTX and present-day. t1 is the age of the Rotation Matrix. MTX may be a sampled  ensembles from BuildEnsemble3D.\n\n\n\n\n\nInterpolate_FiniteRotation(\n    MTX1::Array{Float64, 3}, MTX2::Array{Float64, 3}, \n    t1::Number, t2::Number, time::Number)\n\nInterpolate a Finite Rotation for a given time between two total Rotation Matrices, a younger MTX1 and an older one MTX2. Rotation Matrices ages are t1 and t2  respectively. MTX1 and MTX2 may be a sampled ensembles from BuildEnsemble3D.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#Concatenate-Finite-Rotations","page":"Main Functions","title":"Concatenate Finite Rotations","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Concatenate two or more finite rotations into a plate circuit that links two plates. ","category":"page"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Concatenate_FiniteRotations","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.Concatenate_FiniteRotations","page":"Main Functions","title":"PlateKinematics.Concatenate_FiniteRotations","text":"Concatenate_FiniteRotations(\n    FRsArray::Array{T}, Nsize = 1e5::Number, \n    time=nothing::Union{Nothing, Number}) where {T<:FiniteRotSph}\n\nConcatenate_FiniteRotations(\n    FRsArrays::Array{T}, time=nothing::Union{Nothing, Number}) where {T<:Array{FiniteRotSph}}\n\nConcatenate all the Finite Rotations in the given array FRsArray. A specific output :Time  field may be passed through the argument time. Ensure the list is given in order towards  the fixed reference frame (see Examples - Concatenate Finite Rotations).\n\n\n\n\n\nConcatenate_FiniteRotations(\n    FRs1List::Array{T}, FRs2List::Array{T}, \n    Nsize = 1e5::Number, times = []::Array) where {T<:FiniteRotSph}\n\nGiven two lists of Finite Rotations (FRs1List and FRs2List), concatenate the poles for  available common ages. Specific ages may be passed through the argument times.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Note that concatenation is nothing more than a summation of every two Finite Rotations in a particular order. Knowing this, one may also use the Add_FiniteRotations function.","category":"page"},{"location":"lib/main_functions.html#Finite-Rotations-to-Euler-Vector","page":"Main Functions","title":"Finite Rotations to Euler Vector","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"ToEulerVector\r\nToEulerVectorList","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.ToEulerVector","page":"Main Functions","title":"PlateKinematics.ToEulerVector","text":"ToEulerVector(FRs::FiniteRotSph, reverseRot=false::Bool, Nsize=1e5::Number)\nToEulerVector(FRsArray::Array{FiniteRotSph}, reverseRot=false::Bool)\n\nReturn a stage Euler Vector describing the motion between a total Finite Rotation FRs and present-day. The output time-orientation may the inverted by setting the reverseRot  parameter to true.\n\n\n\n\n\nToEulerVector(\n    FRs1::FiniteRotSph, FRs2::FiniteRotSph, \n    reverseRot=false::Bool, Nsize=1e5::Number)\nToEulerVector(\n    FRs1Array::Array{T}, FRs2Array::Array{T}, \n    reverseRot=false::Bool) where {T<:FiniteRotSph}\n\nReturn a stage Euler Vector describing the motion between two total Finite Rotations (FRs1 and FRs2). The output time-orientation may the inverted by setting the  reverseRot parameter to true.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#PlateKinematics.ToEulerVectorList","page":"Main Functions","title":"PlateKinematics.ToEulerVectorList","text":"ToEulerVectorList(\n    FRsArray::Array{T}, reverseRot=false::Bool, Nsize=1e5::Number) where {T<:FiniteRotSph}\n\nReturn a list of Euler Vectors describing the motion for a list of total Finite Rotations FRsArray. The output time-orientation may the inverted by setting the reverseRot parameter to true.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#Euler-Vector-de-Finite-Rotation","page":"Main Functions","title":"Euler Vector de Finite Rotation","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"ToFiniteRotation","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.ToFiniteRotation","page":"Main Functions","title":"PlateKinematics.ToFiniteRotation","text":"ToFiniteRotation(EVs::EulerVectorSph, reverseRot=false::Bool, Nsize=1e5::Number)\nToFiniteRotation(EVsArray::Array{EulerVectorSph}, reverseRot=false::Bool)\n\nReturn a total Finite Rotation from a total Euler Vector EVs. The output time-orientation  may the inverted by setting the reverseRot parameter to true.\n\n\n\n\n\n","category":"function"},{"location":"lib/main_functions.html#Calculate-Surface-Velocity","page":"Main Functions","title":"Calculate Surface Velocity","text":"","category":"section"},{"location":"lib/main_functions.html","page":"Main Functions","title":"Main Functions","text":"Calculate_SurfaceVelocity","category":"page"},{"location":"lib/main_functions.html#PlateKinematics.Calculate_SurfaceVelocity","page":"Main Functions","title":"PlateKinematics.Calculate_SurfaceVelocity","text":"Calculate_SurfaceVelocity(\n    EVs::EulerVectorSph, pntLon::Number, pntLat::Number, Nsize = 1e5::Number)\n\nCalculate_SurfaceVelocity(\n    EVsArray::Array{T}, pntLon::Number, pntLat::Number, \n    Nsize = 1e5::Number) where {T<:EulerVectorSph}\n\nCalculate_SurfaceVelocity(\n    EVs::EulerVectorSph, arrayLon::Array{T}, arrayLat::Array{T}, \n    Nsize = 1e5::T) where {T<:Number}\n\nCalculate the Surface Velocity components for a given point on Earth, subject to the motion described by an Euler Vector EVs. Location(s) are given through parameters pntLon  and pntLat, which represent spherical coordinates in degrees-East and degrees-North,  respectively. \n\n\n\n\n\n","category":"function"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"examples/mf_concatenate.html#Concatenate-Finite-Rotations","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"","category":"section"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"At time it may be useful to obtain the relative motion between two plates that do not share a divergent margin, or no boundary at all for that matter. The lack of common fracture zones and isochrons produces by a shared spreading center prevents the direct observation of the relative tectonic history between both plates. ","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"This obstacle can be circunvented by using a plate circuit that links both plates, say India and Eurasia, by a series of well-defined relative plate motion reconstructions. To connect the India plate to the Eurasian one, one may use the total reconstruction poles of Eurasia/North-America, North-America/Nubia, Africa/Antarctica, Antarctica/Australia and Australia/India.","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"This examples is taken from the book Plate Tectonics: How it works from Allan Cox, and provides on how to calculate the relative motion between plates that do not share a divergent boundary. All the other plate-pairs mentioned do share a common spreading center, which allows researcher to estimate opening rates of the ocean floor from the magnetic lineations parallel to the ridge.","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"(Image: alt text)","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"Plate circuit example. Modified from Plate Tectonics: How it works.","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"In terms of Finite Rotations (ROT), one would pose the circuit as:","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"sklmdl textsklmdl_rrr _EUFR_IN = frac43pi r^3","category":"page"},{"location":"examples/mf_concatenate.html","page":"Concatenate Finite Rotations","title":"Concatenate Finite Rotations","text":"Note how subscript are meant to indicate the fixed plate on each relative motion. _EUFR_IN <sub>EU</sub>ROT<sub>IN</sub> is the finite rotation describing the motion of Eurasia relative to a fixed India plate.","category":"page"},{"location":"lib/auxiliary_functions.html","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"lib/auxiliary_functions.html#Auxiliary-Functions","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"","category":"section"},{"location":"lib/auxiliary_functions.html#Contents","page":"Auxiliary Functions","title":"Contents","text":"","category":"section"},{"location":"lib/auxiliary_functions.html","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"Pages = [\"auxiliary_functions.md\"]\r\nDepth = 3","category":"page"},{"location":"lib/auxiliary_functions.html#Index","page":"Auxiliary Functions","title":"Index","text":"","category":"section"},{"location":"lib/auxiliary_functions.html","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"Pages = [\"auxiliary_functions.md\"]","category":"page"},{"location":"lib/auxiliary_functions.html#Auxiliary-Functions-2","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"","category":"section"},{"location":"lib/auxiliary_functions.html#Add-Finite-Rotations","page":"Auxiliary Functions","title":"Add Finite Rotations","text":"","category":"section"},{"location":"lib/auxiliary_functions.html","page":"Auxiliary Functions","title":"Auxiliary Functions","text":"Add_FiniteRotations","category":"page"},{"location":"lib/auxiliary_functions.html#PlateKinematics.Add_FiniteRotations","page":"Auxiliary Functions","title":"PlateKinematics.Add_FiniteRotations","text":"Add_FiniteRotations(\n    FRs1::FiniteRotSph, FRs2::FiniteRotSph, \n    Nsize=1e5::Number, time=nothing::Union{Nothing, Number})\n\nAdd_FiniteRotations(\n    FRs1::Array{T}, FRs2::Array{T},\n    time=nothing::Union{Nothing, Number}) where {T<:FiniteRotSph}\n\nReturn the sumation of two Finite Rotations in Spherical coordinates.  A specific output :Time field may be passed through the argument time.\n\n\n\n\n\n","category":"function"},{"location":"lib/types.html","page":"Types","title":"Types","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"lib/types.html#Types","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"This section provides an overview of the types used in PlateKinematics.jl.","category":"page"},{"location":"lib/types.html#Contents","page":"Types","title":"Contents","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"Pages = [\"types.md\"]\r\nDepth = 3","category":"page"},{"location":"lib/types.html#Index","page":"Types","title":"Index","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"Pages = [\"types.md\"]","category":"page"},{"location":"lib/types.html#Types-2","page":"Types","title":"Types","text":"","category":"section"},{"location":"lib/types.html#Covariance","page":"Types","title":"Covariance","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"Covariance","category":"page"},{"location":"lib/types.html#PlateKinematics.Covariance","page":"Types","title":"PlateKinematics.Covariance","text":"struct Covariance\n\nCovariance upper triangle elements. Expressed in radians² for Finite Rotations and in radians²/Myr² for Euler Vectors.\n\nExamples:\n\njulia> PlateKinematics.Covariance()\nPlateKinematics.Covariance(0, 0, 0, 0, 0, 0)\n\njulia> PlateKinematics.Covariance(1, 2, 3, 4, 5, 6)\nPlateKinematics.Covariance(1, 2, 3, 4, 5, 6)\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.Covariance(array)\nPlateKinematics.Covariance(1, 2, 3, 4, 5, 6)\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#Finite-Rotations","page":"Types","title":"Finite Rotations","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"FiniteRotSph\r\nFiniteRotCart\r\nEulerAngles","category":"page"},{"location":"lib/types.html#PlateKinematics.FiniteRotSph","page":"Types","title":"PlateKinematics.FiniteRotSph","text":"struct FiniteRotSph\n\nFinite rotation in Spherical coordinates, expressed in degrees.\n\nFields\n\nLon::Number: Longitude of the rotation axis in degrees-East\nLat::Number: Latitude of the rotation axis in degrees-North\nAngle::Number: Angle of rotation in degrees\nTime::Union{Number, Nothing}: Age of rotation in million years\nCovariance::Covariance: Covariance in radians²\n\nExamples:\n\njulia> PlateKinematics.FiniteRotSph(30, 20, 10)\nPlateKinematics.FiniteRotSph(30, 20, 10, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [30, 20, 10];\njulia> PlateKinematics.FiniteRotSph(array)\nPlateKinematics.FiniteRotSph(30, 20, 10, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> PlateKinematics.FiniteRotSph(30, 20, 10, 2)\nPlateKinematics.FiniteRotSph(30, 20, 10, 2, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.FiniteRotSph(30, 20, 10, array)\nPlateKinematics.FiniteRotSph(30, 20, 10, nothing, PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.FiniteRotSph(30, 20, 10, 2, array)\nPlateKinematics.FiniteRotSph(30, 20, 10, 2, PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#PlateKinematics.FiniteRotCart","page":"Types","title":"PlateKinematics.FiniteRotCart","text":"struct FiniteRotCart\n\nFinite rotation in Cartesian coordinates, expressed in degrees.\n\nFields\n\nX::Number: X-coordinate in degrees\nY::Number: Y-coordinate in degrees\nZ::Number: Z-coordinate in degrees\nTimeRange::Union{Number, Nothing}: Age of rotation in million years\nCovariance::Covariance: Covariance in radians²\n\nExamples:\n\njulia> PlateKinematics.FiniteRotCart(1, 2, 3)\nPlateKinematics.FiniteRotCart(1, 2, 3, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [30, 20, 10];\njulia> PlateKinematics.FiniteRotCart(array)\nPlateKinematics.FiniteRotCart(30, 20, 10, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> PlateKinematics.FiniteRotCart(1, 2, 3, 1.5)\nPlateKinematics.FiniteRotCart(1, 2, 3, 1.5, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.FiniteRotCart(30, 20, 10, array)\nPlateKinematics.FiniteRotCart(30, 20, 10, nothing, PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.FiniteRotCart(1, 2, 3, 1.5, array)\nPlateKinematics.FiniteRotCart(1, 2, 3, 1.5, PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#PlateKinematics.EulerAngles","page":"Types","title":"PlateKinematics.EulerAngles","text":"struct EulerAngles\n\nEuler angles that describe the rotation around the three main axes on Earth.\n\nFields\n\nX::Number: Angle of rotation around the X-axis (0N, 0E)\nY::Number: Angle of rotation around the Y-axis (0N, 90E)\nZ::Number: Angle of rotation around the Z-axis (90N, 0E)\n\nExamples:\n\njulia> PlateKinematics.EulerAngles(4, 5, 6)\nPlateKinematics.EulerAngles(4, 5, 6)\n\njulia> array = [4, 5, 6];\njulia> PlateKinematics.EulerAngles(array)\nPlateKinematics.EulerAngles(4, 5, 6)\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#Euler-Vectors","page":"Types","title":"Euler Vectors","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"EulerVectorSph\r\nEulerVectorCart","category":"page"},{"location":"lib/types.html#PlateKinematics.EulerVectorSph","page":"Types","title":"PlateKinematics.EulerVectorSph","text":"struct EulerVectorSph\n\nEuler vector in spherical coordinates with the following parameters:\n\nFields\n\nLon::Number: Longitude of the Euler pole in degrees-East\nLat::Number: Latitude of the Euler pole in degrees-North\nAngVelocity::Number: Angular velocity in degrees/Myr\nTimeRange::Union{Matrix, Nothing}: Initial to final age of rotation\nCovariance::Covariance: Covariance in radians²/Myr²\n\nExamples:\n\njulia> PlateKinematics.EulerVectorSph(1, 2, 3)\nPlateKinematics.EulerVectorSph(1, 2, 3, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [30, 20, 10];\njulia> PlateKinematics.EulerVectorSph(array)\nPlateKinematics.EulerVectorSph(30, 20, 10, nothing, PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [1.5 2.5];\njulia> length(array) == 2\ntrue\njulia> PlateKinematics.EulerVectorSph(30, 20, 10, array)\nPlateKinematics.EulerVectorSph(30, 20, 10, [1.5 2.5], PlateKinematics.Covariance(0, 0, 0, 0, 0, 0))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> length(array) != 2\ntrue\njulia> PlateKinematics.EulerVectorSph(30, 20, 10, array)\nPlateKinematics.EulerVectorSph(30, 20, 10, nothing, PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\njulia> array = [1, 2, 3, 4, 5, 6];\njulia> PlateKinematics.EulerVectorSph(1, 2, 3, [1.5 2.5], array)\nPlateKinematics.EulerVectorSph(1, 2, 3, [1.5 2.5], PlateKinematics.Covariance(1, 2, 3, 4, 5, 6))\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#PlateKinematics.EulerVectorCart","page":"Types","title":"PlateKinematics.EulerVectorCart","text":"struct EulerVectorCart\n\nEuler vector in Cartesian coordinates, expressed in degrees/Myr.\n\nFields\n\nX::Number: X-coordinate in degrees/Myr\nY::Number: Y-coordinate in degrees/Myr\nZ::Number: Z-coordinate in degrees/Myr\nTimeRange::Union{Matrix, Nothing}: Initial to final age of rotation\nCovariance::Covariance: Covariance in radians²/Myr²\n\nExamples:\n\nSame outer Constructor Methods as EulerVectorSph.\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#Surface-Velocity","page":"Types","title":"Surface Velocity","text":"","category":"section"},{"location":"lib/types.html","page":"Types","title":"Types","text":"Stat\r\nSurfaceVelocityVector","category":"page"},{"location":"lib/types.html#PlateKinematics.Stat","page":"Types","title":"PlateKinematics.Stat","text":"struct Stat\n\nMean and standard deviation of a parameter:\n\nFields\n\nMean::Number: Mean (average)\nStDev::Number: Standard deviation\n\nExamples:\n\njulia> PlateKinematics.Stat(10, 20)\nPlateKinematics.Stat(10, 20)\n\njulia> PlateKinematics.Stat([10 20])\nPlateKinematics.Stat(10, 20)\n\n\n\n\n\n","category":"type"},{"location":"lib/types.html#PlateKinematics.SurfaceVelocityVector","page":"Types","title":"PlateKinematics.SurfaceVelocityVector","text":"struct SurfaceVelocityVector\n\nSurface velocity vector components, expressed in mm/yr.\n\nFields\n\nLon::Number: Longitude of the surface point in degrees-East\nLat::Number: Latitude of the surface point in degrees-North\nEastVel::Union{Number, Stat, Nothing}: East-component of the velocity in mm/yr\nNorthVel::Union{Number, Stat, Nothing}: North-component of the velocity in mm/yr\nTotalVel::Union{Number, Stat, Nothing}: Total velocity in mm/yr\nAzimuth::Union{Number, Stat, Nothing}: Azimuth of the velocity vector as measured clockwise from the North\n\nExamples:\n\njulia> PlateKinematics.SurfaceVelocityVector(10, 20, 4)\nPlateKinematics.SurfaceVelocityVector(10, 20, nothing, nothing, 4, nothing)\n\njulia> totalVel = PlateKinematics.Stat(2.5, 2);\njulia> PlateKinematics.SurfaceVelocityVector(10, 20, totalVel)\nPlateKinematics.SurfaceVelocityVector(10, 20, nothing, nothing, PlateKinematics.Stat(2.5, 2.0), nothing)\n\njulia> PlateKinematics.SurfaceVelocityVector(10, 20, [2.5, 2])\nPlateKinematics.SurfaceVelocityVector(10, 20, nothing, nothing, PlateKinematics.Stat(2.5, 2.0), nothing)\n\njulia> PlateKinematics.SurfaceVelocityVector(10, 20, 4, 3)\nPlateKinematics.SurfaceVelocityVector(10, 20, 4, 3, nothing, nothing)\n\njulia> PlateKinematics.SurfaceVelocityVector(10, 20, 4, 3, 2)\nPlateKinematics.SurfaceVelocityVector(10, 20, 4, 3, 2, nothing)\n\n\n\n\n\n","category":"type"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"lib/other_functions.html#Other-Functions","page":"Other Functions","title":"Other Functions","text":"","category":"section"},{"location":"lib/other_functions.html#Contents","page":"Other Functions","title":"Contents","text":"","category":"section"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"Pages = [\"other_functions.md\"]\r\nDepth = 3","category":"page"},{"location":"lib/other_functions.html#Index","page":"Other Functions","title":"Index","text":"","category":"section"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"Pages = [\"other_functions.md\"]","category":"page"},{"location":"lib/other_functions.html#Other-Functions-2","page":"Other Functions","title":"Other Functions","text":"","category":"section"},{"location":"lib/other_functions.html#Coordinate-System-Transformations","page":"Other Functions","title":"Coordinate System Transformations","text":"","category":"section"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"ToDegrees\r\nToRadians\r\ncart2sph\r\nsph2cart","category":"page"},{"location":"lib/other_functions.html#PlateKinematics.ToDegrees","page":"Other Functions","title":"PlateKinematics.ToDegrees","text":"ToDegrees(radValue::Union{Number, Array})\n\nConvert angles from radians to degrees.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.ToRadians","page":"Other Functions","title":"PlateKinematics.ToRadians","text":"ToRadians(degValue::Union{Number, Array})\n\nConvert angles from degrees to radians.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.cart2sph","page":"Other Functions","title":"PlateKinematics.cart2sph","text":"cart2sph(x::Number, y::Number, z::Number)\ncart2sph(x::Array{T}, y::Array{T}, z::Array{T}) where {T<:Number}\n\nTransform Cartesian coordinates into Spherical coordinates.  Both input and outputs are expressed in degrees.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.sph2cart","page":"Other Functions","title":"PlateKinematics.sph2cart","text":"sph2cart(lon_deg::Number, lat_deg::Number, mag=1::Number)\nsph2cart(lon_deg::Array{T}, lat_deg::Array{T}, mag::Array{T}) where {T<:Number}\nsph2cart(lon_deg::Array{T}, lat_deg::Array{T}) where {T<:Number}\n\nTransform Spherical coordinate(s) into Cartesian coordinate(s).  Both input and outputs are expressed in degrees. \n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#Finite-Rotation-Transformations","page":"Other Functions","title":"Finite Rotation Transformations","text":"","category":"section"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"ToFRs\r\nToFRc\r\nToRotationMatrix\r\nToEulerAngles","category":"page"},{"location":"lib/other_functions.html#PlateKinematics.ToFRs","page":"Other Functions","title":"PlateKinematics.ToFRs","text":"ToFRs(FRc::FiniteRotCart)\nToFRs(FRcArray::Array{FiniteRotCart})\nToFRs(EA::EulerAngles)\nToFRs(EA::Array{EulerAngles})\n\nReturn a Finite Rotation in Spherical coordinates (::FiniteRotSph), expressed in degrees.\n\n\n\n\n\nToFRs(MTX::Array{T, 3}, time=nothing::Union{Nothing, Number}) where {T<:Number}\n\nConvert an array of Rotation Matrices MTX to an array of Finite Rotations (::FiniteRotSph),  expressed in degrees. The :Time field may be passed with the argument time.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.ToFRc","page":"Other Functions","title":"PlateKinematics.ToFRc","text":"ToFRc(FRs::FiniteRotSph)\nToFRc(FRsArray::Array{FiniteRotSph})\n\nReturn a Finite Rotation in Cartesian coordinates (::FiniteRotCart), expressed in degrees.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.ToRotationMatrix","page":"Other Functions","title":"PlateKinematics.ToRotationMatrix","text":"ToRotationMatrix(FRs::FiniteRotSph)\nToRotationMatrix(FRsArray::Array{FiniteRotSph})\nToRotationMatrix(EA::Array{EulerAngles})\nToRotationMatrix(EAx::Array{T, 1}, EAy::Array{T, 1}, EAz::Array{T, 1}) where {T<:Number}\n\nReturn a Rotation Matrix (3x3 Array) expressed in radians.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.ToEulerAngles","page":"Other Functions","title":"PlateKinematics.ToEulerAngles","text":"ToEulerAngles(FRs::FiniteRotSph)\nToEulerAngles(FRsArray::Array{FiniteRotSph})\n\nReturn the set of Euler angles (::EulerAngles) from a Finite Rotation.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#Euler-Vector-Transformations","page":"Other Functions","title":"Euler Vector Transformations","text":"","category":"section"},{"location":"lib/other_functions.html","page":"Other Functions","title":"Other Functions","text":"ToEVs\r\nToEVc","category":"page"},{"location":"lib/other_functions.html#PlateKinematics.ToEVs","page":"Other Functions","title":"PlateKinematics.ToEVs","text":"ToEVs(EVc::EulerVectorCart)\nToEVs(EVcArray::Array{T}) where {T<:EulerVectorSph}\nToEVs(MTX::Array{Number, 3}, timeRange=nothing::Union{Nothing, Matrix})\nToEVs(X::Array{T, 1}, Y::Array{T, 1}, Z::Array{T, 1}, \n    timeRange=nothing::Union{Nothing, Matrix}) where {T<:Number}\n\nReturn an Euler Vector in Spherical coordinates (::EulerVectorSph), with  magnitude expressed in degrees/Myr.\n\n\n\n\n\n","category":"function"},{"location":"lib/other_functions.html#PlateKinematics.ToEVc","page":"Other Functions","title":"PlateKinematics.ToEVc","text":"ToEVc(EVs::EulerVectorSph)\nToEVc(EVsArray::Array{T}) where {T<:EulerVectorSph}\n\nReturn an Euler Vector in Cartesian coordinates (::EulerVectorCart), expressed in degrees/Myr.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"A user-friendly tools for easy handling of Plate Kinematics functions with Julia 🌏 📐","category":"page"},{"location":"index.html#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PlateKinematics is a package aimed at providing types, functions and documentation for working with Finite Rotations, Euler Vectors and Surface Velocities. The knowledge builds from the framework layed down by Allan Cox in his book Plate Tectonics: How It Works.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"PlateKinematics","category":"page"},{"location":"index.html#PlateKinematics","page":"Introduction","title":"PlateKinematics","text":"Main module for PlateKinematics.jl – a compilation of tools for easy handling of Plate Kinematics functions with Julia 🌏 📐.\n\nThis package provides types, functions and documentation for working with Finite Rotations, Euler Vectors and Surface Velocities. \nThe knowledge builds from the framework layed down by Allan Cox in his book Plate Tectonics: How It Works.\n\n\n\n\n\n","category":"module"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"CurrentModule = PlateKinematics","category":"page"},{"location":"lib/private_functions.html#Private-Functions","page":"Private Functions","title":"Private Functions","text":"","category":"section"},{"location":"lib/private_functions.html#Contents","page":"Private Functions","title":"Contents","text":"","category":"section"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"Pages = [\"private_functions.md\"]\r\nDepth = 3","category":"page"},{"location":"lib/private_functions.html#Index","page":"Private Functions","title":"Index","text":"","category":"section"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"Pages = [\"private_functions.md\"]","category":"page"},{"location":"lib/private_functions.html#Private-Functions-2","page":"Private Functions","title":"Private Functions","text":"","category":"section"},{"location":"lib/private_functions.html#Covariance-related-functions","page":"Private Functions","title":"Covariance-related functions","text":"","category":"section"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"CorrelatedEnsemble3D\r\nCovIsZero\r\nCheckCovariance\r\nCovToMatrix\r\nReplaceCovariaceEigs\r\nToArray","category":"page"},{"location":"lib/private_functions.html#PlateKinematics.CorrelatedEnsemble3D","page":"Private Functions","title":"PlateKinematics.CorrelatedEnsemble3D","text":"CorrelatedEnsemble3D(matrix::Array{Number, 2}, Nsize::Number)\n\nGenerates a series of samples [x y z] based on a covariance matrix.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.CovIsZero","page":"Private Functions","title":"PlateKinematics.CovIsZero","text":"CovIsZero(cov::Covariance)\n\nCheck whether all Covariance elements are zero. \n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.CheckCovariance","page":"Private Functions","title":"PlateKinematics.CheckCovariance","text":"CheckCovariance(covMatrix::Array{Number, 2})\n\nCheck whether the covariance matrix yields any negative or imaginary eigenvalue.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.CovToMatrix","page":"Private Functions","title":"PlateKinematics.CovToMatrix","text":"CovToMatrix(FR::Union{FiniteRotSph, FiniteRotCart})\n\nConverts a Finite Rotations Covariance structure [radians^2] to a 3x3 symmetric Matrix [radians^2]. \n\n\n\n\n\nCovToMatrix(EVs::Union{EulerVectorSph, EulerVectorCart})\n\nConvert an Euler Vector Covariance structure [radians²/Myr²] to a 3x3 symmetric Matrix [degrees²/Myr²]. \n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ReplaceCovariaceEigs","page":"Private Functions","title":"PlateKinematics.ReplaceCovariaceEigs","text":"ReplaceCovariaceEigs(covMatrix::Array{Number, 2})\n\nChecks if a covariance-matrix has negative or imaginary eigenvalues, and replace  the diagonal elements (variances) with an average of the positive eigenvalues, while the other elements (covariances) are replaced by zeros.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ToArray","page":"Private Functions","title":"PlateKinematics.ToArray","text":"ToArray(cov::Covariance)\n\nConvert a Covariance structure to a 1x6 Matrix. \n\n\n\n\n\nToArray(myStruct::Union{FiniteRotSph, FiniteRotCart})\n\nConvert a Finite Rotations structure into a Vector.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#Mutate-Structs","page":"Private Functions","title":"Mutate Structs","text":"","category":"section"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"ChangeLon\r\nChangeLat\r\nChangeAngle\r\nChangeTime\r\nChangeCovariance","category":"page"},{"location":"lib/private_functions.html#PlateKinematics.ChangeLon","page":"Private Functions","title":"PlateKinematics.ChangeLon","text":"ChangeLon(FRs::FiniteRotSph, newLon)\n\nChange the :Lon (longitude) value of FRs with newLon.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ChangeLat","page":"Private Functions","title":"PlateKinematics.ChangeLat","text":"Change the :Lat (latitude) value of FRs with newLat.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ChangeAngle","page":"Private Functions","title":"PlateKinematics.ChangeAngle","text":"ChangeAngle(FRs::FiniteRotSph, newAngle::Number)\n\nChange the :Angle (angle) value of FRs with newAngle.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ChangeTime","page":"Private Functions","title":"PlateKinematics.ChangeTime","text":"ChangeTime(FRs::FiniteRotSph, newTime::Number)\n\nChange the :Time (rotation age) value of FRs with newTime.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.ChangeCovariance","page":"Private Functions","title":"PlateKinematics.ChangeCovariance","text":"ChangeCovariance(FRs::FiniteRotSph, newCovariance::Union{Covariance, Array})\n\nChange the ::Covariance (covariance elements) of FRs with newCovariance.\n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#Others","page":"Private Functions","title":"Others","text":"","category":"section"},{"location":"lib/private_functions.html","page":"Private Functions","title":"Private Functions","text":"CartesianVelocity_toEN\r\nGeographicalCoords_toCartesian","category":"page"},{"location":"lib/private_functions.html#PlateKinematics.CartesianVelocity_toEN","page":"Private Functions","title":"PlateKinematics.CartesianVelocity_toEN","text":"CartesianVelocity_toEN(pntLon::Number, pntLat::Number, SVcArray::Array)\n\nConverts a set of velocities from Cartesian to East/North (EN) components. \n\n\n\n\n\n","category":"function"},{"location":"lib/private_functions.html#PlateKinematics.GeographicalCoords_toCartesian","page":"Private Functions","title":"PlateKinematics.GeographicalCoords_toCartesian","text":"GeographicalCoords_toCartesian(pntLon::Number, pntLat::Number, Ht=0::Number)\n\nConverts local geographical coordinates (ellipsoidal) into Cartesian. \n\n\n\n\n\n","category":"function"}]
}
